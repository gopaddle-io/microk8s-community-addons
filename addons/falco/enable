#!/usr/bin/env bash

set -e

source $SNAP/actions/common/utils.sh

NAMESPACE_FALCO="falco"

FALCO_HELM_VERSION="3.8.5"

KUBECTL="$SNAP/microk8s-kubectl.wrapper"
HELM="$SNAP/microk8s-helm3.wrapper"

do_prerequisites() {
  "$SNAP/microk8s-enable.wrapper" helm3
  # enable dns service
  "$SNAP/microk8s-enable.wrapper" dns
  # enable hostpath-storage
  "$SNAP/microk8s-enable.wrapper" hostpath-storage
  # Allow some time for the apiserver to start
  sleep 5
  ${SNAP}/microk8s-status.wrapper --wait-ready --timeout 30 >/dev/null
}

VALUES=""

get_falco() {
  # get the options
  while getopts ":f:h:" flag; do
    case "${flag}" in
            f) VALUES=${OPTARG}
              ;;
            *) echo "Usage: microk8s enable falco"
              echo ""
              echo "With overwriting default values: microk8s enable falco -f values.yaml"
              echo ""
              echo "See https://github.com/falcosecurity/charts/tree/master/falco for more information about the values"
              exit 0
              ;;
    esac
  done

  echo "Installing Falco"

  if [ -n "$VALUES" ]; then
      echo "Using values file: $VALUES"
  fi

  # make sure the "falco" namespace exists
  # $KUBECTL create namespace "$NAMESPACE_FALCO" > /dev/null 2>&1 || true

  # add the falcosecurity chart repository
  $HELM repo add falcosecurity https://falcosecurity.github.io/charts

  # install the helm chart
  if [ -z "$VALUES" ]
  then
      $HELM upgrade -i falco falcosecurity/falco \
        --namespace "$NAMESPACE_FALCO" \
        --create-namespace \
        --version $FALCO_HELM_VERSION \
        --set driver.kind="modern-bpf" \
        --set collectors.containerd.socket="/var/snap/microk8s/common/run/containerd.sock" \
        --set falcosidekick.enabled=true \
        --set falcosidekick.replicaCount=1 \
        --set falcosidekick.webui.enabled=true \
        --set falcosidekick.webui.replicaCount=1
  else
      $HELM upgrade -i falco falcosecurity/falco \
        --namespace "$NAMESPACE_FALCO" \
        --create-namespace \
        --version $FALCO_HELM_VERSION \
        -f $VALUES
  fi

  echo "Falco is installed"
  echo "The default username/password for the Falcosidekick UI is admin/admin"
  echo "The Falcosidekick UI is exposed by the falco-falcosidekick-ui service in the falco Namespace"
  echo "This is a ClusterIP Service by default, so you can either access it via a kubectl port-forward,"
  echo "or you can edit the service to be another type you can reach (e.g. NodePort or LoadBalancer),"
  echo "or (if you have enabled an Ingress controller) you can put an Ingress in front of this service."
}

do_prerequisites
get_falco
